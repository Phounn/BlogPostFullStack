@using Share
@using Share.Enums
@using Share.Models
@inject HttpClient http
<MudDialog>
    <TitleContent>
        Create Blog
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="0" Style="max-width:100rem" Class="d-flex flex-column gap-3">

            @if (string.IsNullOrEmpty(BlogPostModel!.S3Cover))
            {
                <MudFileUpload T="IBrowserFile" FilesChanged="HandleUploadImage">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Files
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            }
            else
            {
                <label>
                    <MudFileUpload T="IBrowserFile" FilesChanged="HandleUploadImage" Hidden></MudFileUpload>
                    <MudImage Style="max-width:100%;" Src="@BlogPostModel!.S3Cover"></MudImage>
                </label>
            }

            <MudTextField @bind-Value="BlogPostModel!.Title" Label="Title"></MudTextField>
            <MudPaper Elevation="0" Class="d-flex gap-4">
                <MudPaper Elevation="0" Class="d-flex gap-4">
                    <MudTextField @bind-Value="@categoryTxt" Label="Add Category"></MudTextField>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="HandleAddCategory">Add</MudButton>
                </MudPaper>
                <MudSelect T="string" @bind-Value="BlogPostModel.Category" Label="Choose Category">
                    @if (CategoryList is not null && CategoryList!.Any())
                    {
                        @foreach (var e in CategoryList)
                        {
                            <MudSelectItem Value="@e.Categories">
                                <div class="d-flex justify-space-between align-center">
                                    <span>@e.Categories</span>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                    Size="Size.Small"
                                    OnClick="@(() => RemoveOption(e.Id!))" />
                                </div>
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudPaper>
            <MudSelect T="BlogStatus" @bind-Value="BlogPostModel.BlogStatus" Label="Status">
                <MudSelectItem Value="@(BlogStatus.Published)">Published</MudSelectItem>
                <MudSelectItem Value="@(BlogStatus.Private)">Private</MudSelectItem>
                <MudSelectItem Value="@(BlogStatus.Draft)">Draft</MudSelectItem>
            </MudSelect>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public BlogPost? BlogPostModel { get; set; }

    [Parameter] public CategoriesOfBlog? CategoryModel { get; set; }

    [Parameter] public EventCallback OnRenderParent { get; set; }

    private List<CategoriesOfBlog>? CategoryList { get; set; } = new();

    private string categoryTxt { get; set; } = string.Empty;

    private async Task HandleUploadImage(IBrowserFile e)
    {
        var content = await Helper.HandleImage(e);
        BlogPostModel!.S3Cover = content;
    }
    protected override async Task OnInitializedAsync()
    {
        var categories = await http!.GetFromJsonAsync<List<CategoriesOfBlog>>("https://localhost:7231/api/BlogPost/category");
        CategoryList = categories;

    }

    private async void HandleAddCategory()
    {
        if (!string.IsNullOrEmpty(categoryTxt))
        {
            CategoryModel!.Categories = categoryTxt;
            var response = await http!.PostAsJsonAsync<CategoriesOfBlog>("https://localhost:7231/api/BlogPost/category/create", CategoryModel);
            var categories = await http!.GetFromJsonAsync<List<CategoriesOfBlog>>("https://localhost:7231/api/BlogPost/category");
            CategoryList = categories;
            categoryTxt = string.Empty;
            StateHasChanged();
        }
    }
    private async void RemoveOption(string id)
    {
        CategoryList = CategoryList!.Where(x => x.Id != id).ToList();
        var response = await http!.DeleteAsync($"https://localhost:7231/api/BlogPost/category/delete/{id}");
        if (BlogPostModel!.Category == id)
            BlogPostModel.Category = "";
    }
    private async Task Submit()
    {
        if (BlogPostModel == null)
            return;
        BlogPostModel!.CreatedDate = DateTime.Now;
        BlogPostModel.CreatedUserId = "Bill-60254";

        var response = await http.PostAsJsonAsync<BlogPost>("https://localhost:7231/api/BlogPost", BlogPostModel);
        if (response.IsSuccessStatusCode)
        {
            BlogPostModel = new();
            await OnRenderParent.InvokeAsync();
        }
        MudDialog!.Close(DialogResult.Ok(true));
    }
    private void Cancel() => MudDialog!.Cancel();
}

